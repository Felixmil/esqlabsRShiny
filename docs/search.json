[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "design.html#simulation-run",
    "href": "design.html#simulation-run",
    "title": "Design",
    "section": "Simulation Run",
    "text": "Simulation Run"
  },
  {
    "objectID": "design.html#parameters-databases",
    "href": "design.html#parameters-databases",
    "title": "Design",
    "section": "Parameters databases",
    "text": "Parameters databases"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "esqLABSRShiny",
    "section": "",
    "text": "Inputs\n\nWe are developing an R package (esqlabsR,https://github.com/esqLABS/esqlabsR) that facilitates our modeling and simulation activities. The package provides a workflow for setting up different simulation scenarios in excel files, which is described in an article from the package documentation: https://esqlabs.github.io/esqlabsR/articles/standard-workflow.html.\nWe would be happy to discuss a design proposal for an app that could facilitate setting up such simulation scenarios and make it less error prone. Feel free to make any proposals of how this workflow can be improved. I understand that you might not have the required background experience with our type of work or the respective packages, so feel free to set up a list of questions that you as an app designer require to have answered to implement such an app.\nWe do not expect any code, but rather how you would design such an app, what features would you implement, how do you think this workflow can be improved. The package repository provides an exemplary modeling&simulation project folder (https://github.com/esqLABS/esqlabsR/tree/develop/tests/data/TestProject) with all files required to execute examples from the article.\n\n\n\n\n\n\n\n\n\n\nMethod\nFirst, the package was reviewed with a user point of view. Accordingly, the following aspects were tested:\n\nPackage installation,\nPackage usage,\nModel settings system,\nVisualization and reporting features.\n\nThen, the strengths and limitations were listed in order to identify improvements axis.\nBased on these axis, a set of proposals was made including a shinyapp design but also other features.\nThese features was organized around an incremental and flexible roadmap detailed on 3 time frames.\nFinally a vision of the “final” shinyApp design and architecture was sketched using excalidraw."
  },
  {
    "objectID": "proposals.html",
    "href": "proposals.html",
    "title": "Proposals",
    "section": "",
    "text": "Here are the proposals to solve the weaknesses identified and improve the overhaul quality of the work done with the esqlabsR package. All these features aim to enhance productivity and increase quality."
  },
  {
    "objectID": "proposals.html#improve-the-excel-files-framework",
    "href": "proposals.html#improve-the-excel-files-framework",
    "title": "Proposals",
    "section": "Improve the Excel Files Framework",
    "text": "Improve the Excel Files Framework\nThe excel base framework could be improved drastically with few minor changes:\n\nOne excel file with many tabs,\nCrossed data validation between datasets,\nWork with data keys/values instead of plain text"
  },
  {
    "objectID": "proposals.html#secure-and-ease-the-parameterizing-process-using-a-shiny-app",
    "href": "proposals.html#secure-and-ease-the-parameterizing-process-using-a-shiny-app",
    "title": "Proposals",
    "section": "Secure and ease the parameterizing process using a shiny app",
    "text": "Secure and ease the parameterizing process using a shiny app\nA simple yet modern “tab” based shiny app can drastically reduce input errors and improve user experience:\n\nPre filled fields and SelectInputs,\nData cross validation,\nField validation,\nSimulation settings summary dashboard,\nBuilt around local sql database.\n\nI would use the bs4Dash package for all the UI: easy to use, modern, well supported and extensible."
  },
  {
    "objectID": "proposals.html#improve-and-automate-reporting-with-rmarkdown",
    "href": "proposals.html#improve-and-automate-reporting-with-rmarkdown",
    "title": "Proposals",
    "section": "Improve and automate reporting with Rmarkdown",
    "text": "Improve and automate reporting with Rmarkdown\nRmarkdown files can take parameters as inputs and execute code based on these parameters.\nOne well designed Rmarkdown template could be sufficient to generate all kind of reports, personnalized base on settings the user chose."
  },
  {
    "objectID": "proposals.html#add-a-live-preview-of-simulation-settings-and-results",
    "href": "proposals.html#add-a-live-preview-of-simulation-settings-and-results",
    "title": "Proposals",
    "section": "Add a live preview of simulation settings and results",
    "text": "Add a live preview of simulation settings and results\nBefore exporting the simulation results, the user should have a live preview of the result. This would allow him to quickly iterate to find the appropriate model and configuration."
  },
  {
    "objectID": "proposals.html#setup-a-shareduser-sql-database-for-parameters",
    "href": "proposals.html#setup-a-shareduser-sql-database-for-parameters",
    "title": "Proposals",
    "section": "Setup a shared/user sql database for parameters",
    "text": "Setup a shared/user sql database for parameters\nIf some values are often duplicated across esqlabs users environments: A central database gathering all the “typical” simulation settings can improve repeatability and increase collaboration between users."
  },
  {
    "objectID": "proposals.html#streamline-the-whole-process-by-integrating-all-these-in-a-server-hosted-shiny-app",
    "href": "proposals.html#streamline-the-whole-process-by-integrating-all-these-in-a-server-hosted-shiny-app",
    "title": "Proposals",
    "section": "Streamline the whole process by integrating all these in a server hosted shiny app",
    "text": "Streamline the whole process by integrating all these in a server hosted shiny app\nThe future esqlabsR shiny could integrate both:\n\nParameterizing process,\nInteract and maintain the central database through a CRUD interface,\nRmarkdown generation (download a .pdf or self contained interactive .html file)"
  },
  {
    "objectID": "proposals.html#secure-a-production-grade-environment-with-a-centralized-server",
    "href": "proposals.html#secure-a-production-grade-environment-with-a-centralized-server",
    "title": "Proposals",
    "section": "Secure a production-grade environment with a centralized server",
    "text": "Secure a production-grade environment with a centralized server\nTo boost reproductibility and repeatability and reach greater quality and security standards, a production environment can be setup, maintained and made available to all users from one central shiny server."
  },
  {
    "objectID": "proposals.html#bonus-host-already-existing-esqlabs-shinyapps-on-a-server",
    "href": "proposals.html#bonus-host-already-existing-esqlabs-shinyapps-on-a-server",
    "title": "Proposals",
    "section": "Bonus: host already existing esqlabs shinyapps on a server",
    "text": "Bonus: host already existing esqlabs shinyapps on a server\nA shiny server could host many other shiny apps than the proposed esqlabsR App."
  },
  {
    "objectID": "review.html",
    "href": "review.html",
    "title": "Package Review Summary",
    "section": "",
    "text": "The following aspects were reviewed:\n\nPackage installation\nExecution & User Experience\nModel settings system,\nVisualization & Reporting"
  },
  {
    "objectID": "review.html#strengths",
    "href": "review.html#strengths",
    "title": "Package Review Summary",
    "section": "Strengths",
    "text": "Strengths\n\nThe package make simulation really easy and understandable,\nThe user experience is designed around domain knowledge,\nThe simulation parameters are easy to read once set,\nThe visualization wrapper allow customization"
  },
  {
    "objectID": "review.html#limitations",
    "href": "review.html#limitations",
    "title": "Package Review Summary",
    "section": "Limitations",
    "text": "Limitations\n\nMany things can go wrong during installation and fragile dependency network,\nEasy to use, hard to customize,\nError-prone configuration workflow,\nLack of output formatting and automation."
  },
  {
    "objectID": "review.html#improvement-axis",
    "href": "review.html#improvement-axis",
    "title": "Package Review Summary",
    "section": "Improvement axis",
    "text": "Improvement axis\nThe identified limitations have impacts on user experience and quality which are directly linked to productivity and customer satisfaction.\n\nUser experience can be increased by:\n\nAnticipating user inputs,\nPreventing and reducing errors,\nAccelerating user iterations,\nAutomating steps,\nReduce frictions,\nEnhancing user collaboration,\n\n\n\nQuality can be increased by:\n\nStandardizing outputs,\nIncrease outputs level of details,\nImprove repeatability and reproducibility of outputs,\nSecuring execution environment and dependencies."
  },
  {
    "objectID": "roadmap.html",
    "href": "roadmap.html",
    "title": "Roadmap",
    "section": "",
    "text": "The proposals made in this study can be independent and incremental. Thus a general roadmap can be proposed to improve the esqlabs usage over time."
  },
  {
    "objectID": "roadmap.html#short-term",
    "href": "roadmap.html#short-term",
    "title": "Roadmap",
    "section": "Short term",
    "text": "Short term\nThese actions can be performed quickly after the beginning of the project. They do not require to break or change things that already exist, instead they can be added on top of the current package architecture.\n\nImprove the Excel files framework\nAutomate reporting using Rmarkdown\n\nrequired resources:\n\nlearning time (domain, package structure and functions)\ndev time\nuser feedback time"
  },
  {
    "objectID": "roadmap.html#middle-term",
    "href": "roadmap.html#middle-term",
    "title": "Roadmap",
    "section": "Middle term",
    "text": "Middle term\nThese actions will require more dev time s\n\nCreate a shinyApp for simulation settings inputs and implement a database based configuration system,\nIntegrate a live preview of simulation settings and results\nIntegrate report rendering in the shinyApp\n\nrequired resources:\n\ndev time\nuser test/feedback time"
  },
  {
    "objectID": "roadmap.html#long-term",
    "href": "roadmap.html#long-term",
    "title": "Roadmap",
    "section": "Long term",
    "text": "Long term\n\nSetup a shared database for simulation parameters which can be queried from shinyapp,\nSetup a CRUD interface in the shinyApp to maintain the parameters database,\nInstall and setup a shiny server with secured environments and dependencies,\nHost others esqlabsR shiny app on this server\n\nrequired resources:\n\ndatabase setup and management time,\nserver rent,\nsetup/configuration time,\ndev time."
  },
  {
    "objectID": "test_data.html",
    "href": "test_data.html",
    "title": "Model Settings Review",
    "section": "",
    "text": "Model setting trough excel will lead to errors\n\n\n\nThe excel files are well structured but may be error prone:\n\nMany different excel files must be opened at the same time,\nThere are a lot of plain text repetition in the files,\nThere is no crossed data validation between excel files (I can launch a simulation on Indvi3 instead of Indiv3, the source of the problem can be long to find).\nEach user have its own Excel files in its environment. As they can be hard to “merge”, reproducibility is hard to achieve,\nExcel files can’t be versionned properly, thus are lowering the simulations repeatability over time.\n\nQuestions:\n\nDo “input” errors occurs often ? Do users need to reconfigure excel files several times before running a simulation successfully ?\nHow the simulations are “shared” among users ? Through excel files ?\nDid the Excel files include “forms” or “value validation” ?"
  },
  {
    "objectID": "test_data.html#excel-files",
    "href": "test_data.html#excel-files",
    "title": "Model Settings Review",
    "section": "Excel files",
    "text": "Excel files\n\nScenarios\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScenario_name\nIndividualId\nModelParameterSheets\nApplicationProtocol\nSimulationTime\nSimulationTimeUnit\nSteadyState\nModelFile\n\n\n\n\nTestScenario\nIndiv1\nGlobal\nAciclovir_iv_250mg\n24\nh\nFALSE\nAciclovir.pkml\n\n\nTestScenario2\nIndiv\nGlobal\nAciclovir_iv_250mg\n12\nh\nTRUE\nAciclovir.pkml\n\n\n\n\n\n\n\n\nApplicationParameters\n\n\n\n\n\n\n\n\n\n\n\n\nContainer Path\nParameter Name\nValue\nUnits\n\n\n\n\nApplications|IV 250mg 10min|Application_1|ProtocolSchemaItem\nDose\n250\nmg\n\n\n\n\n\n\n\n\nIndividualParameters\n\n\n\n\n\n\nContainer Path\nParameter Name\nValue\nUnits\n\n\n\n\nOrganism|Kidney\nGFR\n90\nml/min\n\n\n\n\n\n\n\n\nIndividualPhysiology\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndividualId\nSpecies\nPopulation\nGender\nWeight [kg]\nHeight [cm]\nAge [year(s)]\n\n\n\n\nIndiv1\nHuman\nEuropean_ICRP_2002\nMALE\n73\n176\n30\n\n\n\n\n\n\n\n\nModelParameters\n\n\n\n\n\n\nContainer Path\nParameter Name\nValue\nUnits\n\n\n\n\nOrganism|Liver\nEHC continuous fraction\n1\nNA\n\n\n\n\n\n\n\n\nPopulationParameters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopulationName\nspecies\npopulation\nnumberOfIndividuals\nproportionOfFemales\nweightMin\nweightMax\nweightUnit\nheightMin\nheightMax\nheightUnit\nageMin\nageMax\nBMIMin\nBMIMax\nBMIUnit\n\n\n\n\nTestPopulation\nHuman\nEuropean_ICRP_2002\n1000\n0\nNA\nNA\nkg\nNA\nNA\ncm\n22\n41\nNA\nNA\nkg/m²"
  },
  {
    "objectID": "test_install.html",
    "href": "test_install.html",
    "title": "Installation Review",
    "section": "",
    "text": "The package was successfuly installed\n\n\n\n… even though it wasn’t as easy.\nSome packages required to download zips and manually install, some can be installed directly from github. I had the chance to find how to install properly from zipfiles here (It didn’t work with devtools::install_local() which I usually use). More extensive instructions should be available in the repo’s README.\nQuestions:\n\nDo users in esqlabs have their own installs of RStudio and esqlabsR + dependencies ?\nDo they often encounters bug or environment misconfigurations when upgrading version ?\nWhat are the most common problem when people want to use the package ?\nAre they users outside of esqlabs ? Who are they ?"
  },
  {
    "objectID": "test_install.html#install-the-package",
    "href": "test_install.html#install-the-package",
    "title": "Installation Review",
    "section": "Install the package",
    "text": "Install the package\nLooking for installation from https://github.com/esqLABS/esqlabsR.\n\n\nWhy is the package not installable from github directly ?"
  },
  {
    "objectID": "test_install.html#install-dependencies",
    "href": "test_install.html#install-dependencies",
    "title": "Installation Review",
    "section": "Install dependencies",
    "text": "Install dependencies\nAccording to the Readme file, dependencies must be installed manually.\n\n\nWhat all these dependencies do ?\n\nrClr\n\ndownload.file(\"https://github.com/Open-Systems-Pharmacology/rClr/releases/download/v0.9.2/rClr_0.9.2.zip\", \"_data/rClr.zip\")\ninstall.packages(\"_data/rClr.zip\", repos = NULL)\n\n\n\nOSPSuite.Rutils & TLF library\n\nlibrary(remotes)\nremotes::install_github(\"Open-Systems-Pharmacology/OSPSuite.RUtils\")\nremotes::install_github(\"Open-Systems-Pharmacology/TLF-Library\")\n\n\n\nOSPSuite\n\ndownload.file(\"https://github.com/Open-Systems-Pharmacology/OSPSuite-R/releases/download/v11.0.123/ospsuite_11.0.123.zip\", \"_data/ospsuite.zip\")\ninstall.packages(\"_data/ospsuite.zip\", repos = NULL)\n\n\n\nOSPSuite Parameter Identification\n\nremotes::install_github(\"Open-Systems-Pharmacology/OSPSuite.ParameterIdentification\")\n\n\n\nVerification\n\npackageVersion(\"ospsuite\")\npackageVersion(\"tlf\")\npackageVersion(\"rClr\")\n\n[1] '11.0.123'\n[1] '1.4.0'\n[1] '0.9.2'"
  },
  {
    "objectID": "test_install.html#install-esqlabsr",
    "href": "test_install.html#install-esqlabsr",
    "title": "Installation Review",
    "section": "Install esqLABSR",
    "text": "Install esqLABSR\n\nInstallation process\n\ndownload.file(\"https://ci.appveyor.com/api/buildjobs/7k0p0h00kkcga9nv/artifacts/esqlabsR.zip\", destfile = \"_data/esqlabsR.zip\")\ninstall.packages(\"_data/esqlabsR.zip\", repos = NULL)\n\n\n\nVerification\n\nlibrary(esqlabsR)\n\n\nfind.package(\"esqlabsR\")\npackageVersion(\"esqlabsR\")\n\n[1] \"C:/Users/Felix/Programmes/R/R-4.2.1/library/esqlabsR\"\n[1] '5.0.135'"
  },
  {
    "objectID": "test_use.html",
    "href": "test_use.html",
    "title": "User Experience Review",
    "section": "",
    "text": "Easy to use, hard to customise\n\n\n\nThe workflow is pretty straightforward. I’m surprised I could run such an interesting simulation so easily.\nThe simulation parameters and arguments are easily understandable since the functions are domain driven developped.\nHowever, setup a new scenarios with other values is tedious.\nThis review could show what are the User Exeperience Inputs and Outputs:\n\nInputs: Designing a simulation is mostly setting parameters (here through excel files),\nOutputs: One of the expected result output for the user is graphical: here, a curve showing concentration over time,\n\nQuestions:\n\nexcept the simulation settings, what are the parameters/files that a user may need to change ?\nwhat kind of compound can be simulated ?\nwhat are the main biological factors that will impact the compound half-life ?\nThis is a run of the Standard Workflow"
  },
  {
    "objectID": "test_use.html#package-import",
    "href": "test_use.html#package-import",
    "title": "User Experience Review",
    "section": "Package Import",
    "text": "Package Import\n\nlibrary(esqlabsR)"
  },
  {
    "objectID": "test_use.html#project-configuration",
    "href": "test_use.html#project-configuration",
    "title": "User Experience Review",
    "section": "Project Configuration",
    "text": "Project Configuration\n\n\n\n\n\n\nNote\n\n\n\nDownloaded the whole esqlabsR package and put the tests/data/TestProject/ files in _data/TestProject/\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThese parameters could be depend on a “root” directory. for example:\nprojConf$root_dir <- \"_data/TestProject\"\nprojConf$dataFolder  <-  paste0(projConf$root_dir, \"Data/\")\n\n\n\nprojectConfiguration <- createDefaultProjectConfiguration(path = \"_data/TestProject/Code/ProjectConfiguration.xlsx\")\n\n# Replace variables to match my project structure\nprojectConfiguration$dataFolder <- \"_data/TestProject/Data/\"\nprojectConfiguration$modelFolder <- \"_data/TestProject/Models/Simulations/\"\nprojectConfiguration$paramsFolder <- \"_data/TestProject/Parameters/\"\nprojectConfiguration$outputFolder <- \"_data/TestProject/Outputs/\"\n\nprint(projectConfiguration)\n\nProjectConfiguration: \n   Model folder: _data/TestProject/Models/Simulations/ \n   Parameters folder: _data/TestProject/Parameters/ \n   Parameters file name: ModelParameters.xlsx \n   Individual parameters file name: IndividualParameters.xlsx \n   Individual physiology file name: IndividualPhysiology.xlsx \n   Population parameters file name: PopulationParameters.xlsx \n   Scenario definitions file name: Scenarios.xlsx \n   Scenario applications definitions file name: ApplicationParameters.xlsx \n   Experimental data folder: _data/TestProject/Data/ \n   Experimental data file: TestProject_TimeValuesData.xlsx \n   Data importer configuration: esqlabs_dataImporter_configuration.xml \n   Output folder: _data/TestProject/Outputs/ \n   Output device:"
  },
  {
    "objectID": "test_use.html#load-predefined-simulation",
    "href": "test_use.html#load-predefined-simulation",
    "title": "User Experience Review",
    "section": "Load predefined simulation",
    "text": "Load predefined simulation\n\nscenarioConfigurations <- readScenarioConfigurationFromExcel(\n  scenarioNames = \"TestScenario\",\n  projectConfiguration = projectConfiguration)\n\nprint(scenarioConfigurations$TestScenario)\n\nProjectConfiguration: \n   Model folder: _data/TestProject/Models/Simulations/ \n   Parameters folder: _data/TestProject/Parameters/ \n   Parameters file name: ModelParameters.xlsx \n   Individual parameters file name: IndividualParameters.xlsx \n   Individual physiology file name: IndividualPhysiology.xlsx \n   Population parameters file name: PopulationParameters.xlsx \n   Scenario definitions file name: Scenarios.xlsx \n   Scenario applications definitions file name: ApplicationParameters.xlsx \n   Experimental data folder: _data/TestProject/Data/ \n   Experimental data file: TestProject_TimeValuesData.xlsx \n   Data importer configuration: esqlabs_dataImporter_configuration.xml \n   Output folder: _data/TestProject/Outputs/ \n   Output device: \nScenarioConfiguration: \n   Model file name: Aciclovir.pkml \n   Scenario name: TestScenario \n   Parameters sheets: Global \n   Individual Id: Indiv1 \n   Application protocol: Aciclovir_iv_250mg \n   Simulation time: 1440 \n   Points per minute: 1 \n   Simulate steady-state: FALSE \n   Steady-state time: 1000 \n   Set test parameters: FALSE"
  },
  {
    "objectID": "test_use.html#run-simulation",
    "href": "test_use.html#run-simulation",
    "title": "User Experience Review",
    "section": "Run simulation",
    "text": "Run simulation\n\nsimulatedScenarios <- runScenarios(\n  scenarioConfigurations = scenarioConfigurations,\n  customParams = NULL, \n  saveSimulationsToPKML = FALSE\n)\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\ngot this error:\n\nError in initPKSim() : Could not find an installation of PK-Sim on the machine.\n\nAfter installing OSPSuite-Full.11.0.139.exe the code successfull ran."
  },
  {
    "objectID": "test_use.html#what-are-the-results-of-the-simulation",
    "href": "test_use.html#what-are-the-results-of-the-simulation",
    "title": "User Experience Review",
    "section": "What are the results of the simulation ?",
    "text": "What are the results of the simulation ?\n\nstr(simulatedScenarios$TestScenario)\n\nList of 3\n $ simulation  :Classes 'Simulation', 'ObjectBase', 'DotNetWrapper', 'Printable', 'R6' <Simulation>\n  Inherits from: <ObjectBase>\n  Public:\n    allApplicationsFor: function (quantityPath) \n    allEndogenousStationaryMoleculeNames: function () \n    allFloatingMoleculeNames: function () \n    allStationaryMoleculeNames: function () \n    allXenobioticFloatingMoleculeNames: function () \n    id: 2hi92a8pKk2VDDKGKfcrRw\n    initialize: function (ref, sourceFile = NULL) \n    molWeightFor: function (quantityPath) \n    name: Vergin 1995 IV\n    outputSchema: OutputSchema, DotNetWrapper, Printable, R6\n    outputSelections: OutputSelections, DotNetWrapper, Printable, R6\n    path: Vergin 1995 IV\n    print: function (...) \n    ref: cobjRef\n    root: Container, Entity, ObjectBase, DotNetWrapper, Printable, R6\n    solver: SolverSettings, DotNetWrapper, Printable, R6\n    sourceFile: _data/TestProject/Models/Simulations//Aciclovir.pkml\n  Private:\n    .buildConfiguration: cobjRef\n    .ref: cobjRef\n    .settings: SimulationSettings, DotNetWrapper, Printable, R6\n    .sourceFile: _data/TestProject/Models/Simulations//Aciclovir.pkml\n    finalize: function () \n    printClass: function () \n    printLine: function (entry, value = NULL, addTab = TRUE) \n    readOnlyProperty: function (propertyName, value, returnValue) \n    throwPropertyIsReadonly: function (propertyName) \n    wrapExtensionMethod: function (typename, methodName, propertyName, value) \n    wrapExtensionMethodCached: function (typename, methodName, propertyName, cachedValue, value) \n    wrapIndexProperty: function (propertyName, value) \n    wrapIntegerProperty: function (propertyName, value) \n    wrapNullableIntegerProperty: function (propertyName, value) \n    wrapProperty: function (propertyName, value, shouldSetNull = TRUE) \n    wrapReadOnlyProperty: function (propertyName, value) \n    wrapVectorProperty: function (propertyNameSingular, propertyNamePlural, value, returnPropertyName)  \n $ results     :Classes 'SimulationResults', 'DotNetWrapper', 'Printable', 'R6' <SimulationResults>\n  Inherits from: <DotNetWrapper>\n  Public:\n    allIndividualIds: 0\n    allQuantityPaths: Organism|PeripheralVenousBlood|Aciclovir|Plasma (Periphe ...\n    count: 1\n    getValuesByPath: function (path, individualIds, stopIfNotFound = TRUE) \n    hasResultsForIndividual: function (individualId) \n    initialize: function (ref, simulation) \n    print: function (...) \n    ref: cobjRef\n    resultsForIndividual: function (individualId) \n    simulation: Simulation, ObjectBase, DotNetWrapper, Printable, R6\n    timeValues: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ...\n  Private:\n    .individualResultsCache: Cache, R6\n    .ref: cobjRef\n    .simulation: Simulation, ObjectBase, DotNetWrapper, Printable, R6\n    allIndividualResults: function (value) \n    finalize: function () \n    getResultsForIndividual: function (individualId) \n    printClass: function () \n    printLine: function (entry, value = NULL, addTab = TRUE) \n    readOnlyProperty: function (propertyName, value, returnValue) \n    throwPropertyIsReadonly: function (propertyName) \n    wrapExtensionMethod: function (typename, methodName, propertyName, value) \n    wrapExtensionMethodCached: function (typename, methodName, propertyName, cachedValue, value) \n    wrapIndexProperty: function (propertyName, value) \n    wrapIntegerProperty: function (propertyName, value) \n    wrapNullableIntegerProperty: function (propertyName, value) \n    wrapProperty: function (propertyName, value, shouldSetNull = TRUE) \n    wrapReadOnlyProperty: function (propertyName, value) \n    wrapVectorProperty: function (propertyNameSingular, propertyNamePlural, value, returnPropertyName)  \n $ outputValues:List of 2\n  ..$ data    :'data.frame':    1441 obs. of  3 variables:\n  .. ..$ IndividualId                                                             : int [1:1441] 0 0 0 0 0 0 0 0 0 0 ...\n  .. ..$ Time                                                                     : num [1:1441] 0 1 2 3 4 5 6 7 8 9 ...\n  .. ..$ Organism|PeripheralVenousBlood|Aciclovir|Plasma (Peripheral Venous Blood): num [1:1441] 0 2.71 7.83 13.11 18.25 ...\n  ..$ metaData:List of 2\n  .. ..$ Organism|PeripheralVenousBlood|Aciclovir|Plasma (Peripheral Venous Blood):List of 2\n  .. .. ..$ unit     : chr \"µmol/l\"\n  .. .. ..$ dimension: chr \"Concentration (molar)\"\n  .. ..$ Time                                                                     :List of 2\n  .. .. ..$ unit     : chr \"min\"\n  .. .. ..$ dimension: chr \"Time\"\n\n\nThe output of the simulation contains:\n\nThe simulations parameters\nThe results which seems to be blood concentration over time for this example."
  },
  {
    "objectID": "test_use.html#import-observeddata",
    "href": "test_use.html#import-observeddata",
    "title": "User Experience Review",
    "section": "Import ObservedData",
    "text": "Import ObservedData\n\ndataSheets <- \"Laskin 1982.Group A\"\nobservedData <- loadObservedData(\n  projectConfiguration = projectConfiguration,\n  sheets = dataSheets\n)\n\nprint(names(observedData))\n\n[1] \"Aciclovir_Laskin 1982.Group A_1_Human_PeripheralVenousBlood_Plasma_2.5 mg/kg_iv\""
  },
  {
    "objectID": "test_visualize.html",
    "href": "test_visualize.html",
    "title": "Visualisation & Reporting Review",
    "section": "",
    "text": "This is a run of the visualisation workflow\n\nSimulation initialisation\n\nlibrary(esqlabsR)\n# Create a project configuration\nprojectConfiguration <- createDefaultProjectConfiguration(path = \"_data/TestProject/Code/ProjectConfiguration.xlsx\")\n\n# Replace variables to match my project structure\nprojectConfiguration$dataFolder <- \"_data/TestProject/Data/\"\nprojectConfiguration$modelFolder <- \"_data/TestProject/Models/Simulations/\"\nprojectConfiguration$paramsFolder <- \"_data/TestProject/Parameters/\"\nprojectConfiguration$outputFolder <- \"_data/TestProject/Outputs/\"\n\nprint(projectConfiguration)\n\nProjectConfiguration: \n   Model folder: _data/TestProject/Models/Simulations/ \n   Parameters folder: _data/TestProject/Parameters/ \n   Parameters file name: ModelParameters.xlsx \n   Individual parameters file name: IndividualParameters.xlsx \n   Individual physiology file name: IndividualPhysiology.xlsx \n   Population parameters file name: PopulationParameters.xlsx \n   Scenario definitions file name: Scenarios.xlsx \n   Scenario applications definitions file name: ApplicationParameters.xlsx \n   Experimental data folder: _data/TestProject/Data/ \n   Experimental data file: TestProject_TimeValuesData.xlsx \n   Data importer configuration: esqlabs_dataImporter_configuration.xml \n   Output folder: _data/TestProject/Outputs/ \n   Output device: \n\n# Create `ScenarioConfiguration` objects from excel files\nscenarioConfigurations <- readScenarioConfigurationFromExcel(\n  scenarioNames = \"TestScenario\",\n  projectConfiguration = projectConfiguration\n)\n# Run scenario configuration\nsimulatedScenarios <- runScenarios(\n  scenarioConfigurations = scenarioConfigurations,\n  customParams = NULL, saveSimulationsToPKML = FALSE\n)\n\n# Load observed data\ndataSheets <- \"Laskin 1982.Group A\"\nobservedData <- loadObservedData(projectConfiguration = projectConfiguration, sheets = dataSheets)\n\n\n\nCombined Data creation\n\ndataCombined <- DataCombined$new()\ndataCombined$addDataSets(observedData, names = \"Observed\", groups = \"Aciclovir\")\ndataCombined$addSimulationResults(simulatedScenarios$TestScenario$results,\n                                  names = \"Simulated\",\n                                  groups = \"Aciclovir\"\n)\n\n\n\nPlot Configuration\n\nplotConfig <- createEsqlabsPlotConfiguration()\ngridConfig <- createEsqlabsPlotGridConfiguration()\nexportConfig <- createEsqlabsExportConfiguration(projectConfiguration)\n\n\n\nPlot Generation\n\n\n\n\n\n\n\n\nImportant\n\n\n\nCould not use these functions, they seem to not exist anymore in the package ospsuite\n\n\n\nplotConfig$title <- \"Time profile\"\nindivPlot <- plotIndividualTimeProfile(dataCombined, defaultPlotConfiguration = plotConfig)\n\nError in if (yDimensionString %in% concDimensions) {: la condition est de longueur > 1\n\nplotConfig$title <- \"Observed-vs-simulated\"\nobsVsSimPlot <- plotObservedVsSimulated(dataCombined, defaultPlotConfiguration = plotConfig)\n\nError in plotObservedVsSimulated(dataCombined, defaultPlotConfiguration = plotConfig): impossible de trouver la fonction \"plotObservedVsSimulated\"\n\nplotConfig$title <- \"Res-vs-time\"\nresVsTimePlot <- plotResidualsVsTime(dataCombined, defaultPlotConfiguration = plotConfig)\n\nError in plotResidualsVsTime(dataCombined, defaultPlotConfiguration = plotConfig): impossible de trouver la fonction \"plotResidualsVsTime\"\n\nplotConfig$title <- \"Res-vs-simulated\"\nresVsSimPlot <- plotResidualsVsSimulated(dataCombined, defaultPlotConfiguration = plotConfig)\n\nError in plotResidualsVsSimulated(dataCombined, defaultPlotConfiguration = plotConfig): impossible de trouver la fonction \"plotResidualsVsSimulated\"\n\ngridConfig$addPlots(list(indivPlot, obsVsSimPlot, resVsTimePlot, resVsSimPlot))\n\nError in gridConfig$addPlots(list(indivPlot, obsVsSimPlot, resVsTimePlot, : objet 'indivPlot' introuvable\n\ngridConfig$title <- \"All aciclovir plots\"\ngridPlot <- plotGrid(gridConfig)\n\nError: Can only wrap ggplot and/or grob objects or a list of them\n\ngridPlot\n\nError in eval(expr, envir, enclos): objet 'gridPlot' introuvable\n\n\nOutputs should look like this:\n\nUsing output dataframe instead\n\ndata <- dataCombined$toDataFrame()\n\n\nlibrary(tidyverse)\n\nggplot() +\n  geom_point(data = \n               data %>% filter(dataType == \"observed\") %>%\n               mutate(xValues = xValues*60,\n                      yValues = yValues*1000/molWeight),\n             aes(x=xValues, y=yValues, color = dataType)) +\n  geom_line(data = data %>% \n              filter(dataType == \"simulated\"),\n            aes(x=xValues, y=yValues, color = dataType))+\nlabs(x = \"Time [min]\",\n     y = \"Concentration [µmol]\")"
  }
]